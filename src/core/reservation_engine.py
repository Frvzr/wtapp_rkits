from typing import Dict
import pandas as pd
from .data_models import ReservationResult, StockItem, ReservationStrategy
import logging

logger = logging.getLogger(__name__)


class ReservationEngine:
    def __init__(self, strategy: ReservationStrategy = ReservationStrategy.LOWEST_SN_FIRST):
        self.strategy = strategy

    def reserve_items(self, res: int, redress: Dict, qty_on_store_data: pd.DataFrame) -> ReservationResult:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
        #logger.info(f"Starting reservation with strategy: {self.strategy}")

        if self.strategy == ReservationStrategy.LOWEST_SN_FIRST:
            return self._reserve_lowest_sn_first(res, redress, qty_on_store_data)
        elif self.strategy == ReservationStrategy.HIGHEST_QTY_FIRST:
            return self._reserve_highest_qty_first(res, redress, qty_on_store_data)
        else:
            raise ValueError(f"Unknown reservation strategy: {self.strategy}")

    #     )
    def _reserve_lowest_sn_first(self, res: int, redress: Dict, qty_on_store_data: pd.DataFrame) -> ReservationResult:
        """–†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –æ—Ç –º–µ–Ω—å—à–µ–≥–æ SN –±–æ–ª—å—à–µ–º—É, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤ –∫–æ–Ω—Ü–µ"""
        reserved = {'reserved': [], 'update_data': []}
        required = res if res >= 0 else 1

        #print(f"\nüéØ RESERVATION START: {redress.get('redress_kit', 'Unknown')}, required kits={required}")

        for item in redress['consist']:
            item_from_consist = item['item'].upper()
            qty_from_consist = item['qty']
            total_needed = qty_from_consist * required

            #print(f"\nüîç Processing: {item_from_consist}, qty_per_kit={qty_from_consist}, total_needed={total_needed}")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ Part Number
            part_data = qty_on_store_data[qty_on_store_data['Part Number'] == item_from_consist].copy()
            total_available = part_data['Total'].sum()

            #print(f"üìä Available: {total_available} across {len(part_data)} records")

            # –†–∞—Å—á–µ—Ç —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å
            if total_available > 0:
                req = qty_from_consist * int(required)
                reserved_qty = min(req, total_available)
            else:
                reserved_qty = 0

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ reserved
            reserved['reserved'].append({
                "item": item_from_consist,
                "qty": reserved_qty
            })

            #print(f"üí∞ Reserved qty: {reserved_qty}")

            # –í–´–ß–ò–°–õ–Ø–ï–ú –î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–ê
            if reserved_qty > 0 and not part_data.empty:
                remaining_to_subtract = reserved_qty
                #print(f"   üßÆ Need to subtract: {remaining_to_subtract} from stock")

                # –°–û–†–¢–ò–†–£–ï–ú –ø–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É SN
                with_sn = part_data[part_data['SN'].apply(lambda x: bool(str(x).strip()) if pd.notna(x) else False)].copy()
                without_sn = part_data[part_data['SN'].apply(lambda x: not bool(str(x).strip()) if pd.notna(x) else True)].copy()
                with_sn = with_sn.sort_values('SN', ascending=True)
                sorted_data = pd.concat([with_sn, without_sn])

                processed_records = []

                for i, (_, row) in enumerate(sorted_data.iterrows()):
                    current_total = row['Total']
                    current_sn = row['SN']

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SN –≤ —Å—Ç—Ä–æ–∫—É
                    if pd.isna(current_sn) or current_sn == '':
                        current_sn_str = ""
                    elif isinstance(current_sn, (int, float)):
                        if isinstance(current_sn, float) and current_sn.is_integer():
                            current_sn_str = str(int(current_sn))
                        else:
                            current_sn_str = str(current_sn)
                    else:
                        current_sn_str = str(current_sn).strip()

                    #print(f"   üì¶ Record {i+1}: SN='{current_sn_str}', Available={current_total}, Remaining to subtract={remaining_to_subtract}")

                    if remaining_to_subtract <= 0:
                        # –ï—Å–ª–∏ —É–∂–µ –≤—ã—á–ª–∏ –≤—Å—ë –Ω—É–∂–Ω–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        if current_total > 0:
                            processed_records.append(StockItem(
                                part_number=item_from_consist,
                                serial_number=current_sn_str,
                                total=current_total
                            ))
                            #print(f"      ‚úÖ No more needed, keep {current_total}")
                        continue

                    if current_total > 0:
                        if current_total >= remaining_to_subtract:
                            # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
                            new_qty = current_total - remaining_to_subtract
                            processed_records.append(StockItem(
                                part_number=item_from_consist,
                                serial_number=current_sn_str,
                                total=new_qty
                            ))
                            #print(f"      ‚úÖ Take {remaining_to_subtract} from this SN, remaining: {new_qty}")
                            remaining_to_subtract = 0
                        else:
                            # –ë–µ—Ä–µ–º –≤—Å—ë –∏–∑ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
                            processed_records.append(StockItem(
                                part_number=item_from_consist,
                                serial_number=current_sn_str,
                                total=0
                            ))
                            #print(f"      ‚úÖ Take all {current_total} from this SN")
                            remaining_to_subtract -= current_total
                    else:
                        # –ó–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º - –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º
                        processed_records.append(StockItem(
                            part_number=item_from_consist,
                            serial_number=current_sn_str,
                            total=0
                        ))
                        #print(f"      ‚ö†Ô∏è  Zero quantity, skip")

                # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ update_data
                reserved['update_data'].extend(processed_records)
                #print(f"üìã Added {len(processed_records)} records to update_data")

            elif not part_data.empty:
                # –ï—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –∫–∞–∫ –µ—Å—Ç—å
                #print(f"üìã No reservation needed, keeping {len(part_data)} records as-is")
                for _, row in part_data.iterrows():
                    current_sn = row['SN']
                    if pd.isna(current_sn) or current_sn == '':
                        current_sn_str = ""
                    elif isinstance(current_sn, (int, float)):
                        if isinstance(current_sn, float) and current_sn.is_integer():
                            current_sn_str = str(int(current_sn))
                        else:
                            current_sn_str = str(current_sn)
                    else:
                        current_sn_str = str(current_sn).strip()

                    reserved['update_data'].append(StockItem(
                        part_number=item_from_consist,
                        serial_number=current_sn_str,
                        total=row['Total']
                    ))
            else:
                print(f"üìã No data for item {item_from_consist}")

        #print(f"\nüéØ RESERVATION COMPLETE: {len(reserved['update_data'])} total update records, {len(reserved['reserved'])} items reserved")

        return ReservationResult(
            reserved=reserved['reserved'],
            update_data=reserved['update_data']
        )

    def _reserve_highest_qty_first(self, res: int, redress: Dict, qty_on_store_data: pd.DataFrame) -> ReservationResult:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã–π"""
        # TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        return self._reserve_lowest_sn_first(res, redress, qty_on_store_data)

    def validate_reservation(self, reservation: ReservationResult) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not reservation.reserved or not reservation.update_data:
            logger.error("Invalid reservation: empty data")
            return False

        total_reserved = sum(item['qty'] for item in reservation.reserved)
        total_updated = sum(item.total for item in reservation.update_data)

        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        if total_reserved < 0 or total_updated < 0:
            logger.error("Invalid reservation: negative quantities")
            return False

        logger.info(f"Reservation validated: {total_reserved} units reserved")
        return True
